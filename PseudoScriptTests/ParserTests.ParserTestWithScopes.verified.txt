{
  body: [
    {
      variable: {
        name: a,
        type: Identifier,
        start: {
          line: 1,
          character: 1
        },
        end: {
          line: 1,
          character: 2
        }
      },
      init: {
        value: moo,
        raw: "moo",
        type: StringLiteral,
        start: {
          line: 1,
          character: 5
        },
        end: {
          line: 1,
          character: 10
        }
      },
      type: AssignmentStatement,
      start: {
        line: 1,
        character: 1
      },
      end: {
        line: 1,
        character: 11
      }
    },
    {
      variable: {
        name: b,
        type: Identifier,
        start: {
          line: 2,
          character: 1
        },
        end: {
          line: 2,
          character: 2
        }
      },
      init: {
        value: 123.0,
        raw: 123,
        type: NumericLiteral,
        start: {
          line: 2,
          character: 5
        },
        end: {
          line: 2,
          character: 8
        }
      },
      type: AssignmentStatement,
      start: {
        line: 2,
        character: 1
      },
      end: {
        line: 2,
        character: 9
      }
    },
    {
      body: [
        {
          variable: {
            name: a,
            type: Identifier,
            start: {
              line: 5,
              character: 2
            },
            end: {
              line: 5,
              character: 3
            }
          },
          init: {
            value: was,
            raw: "was",
            type: StringLiteral,
            start: {
              line: 5,
              character: 6
            },
            end: {
              line: 5,
              character: 11
            }
          },
          type: AssignmentStatement,
          start: {
            line: 5,
            character: 2
          },
          end: {
            line: 5,
            character: 12
          }
        },
        {
          variable: {
            name: b,
            type: Identifier,
            start: {
              line: 6,
              character: 2
            },
            end: {
              line: 6,
              character: 3
            }
          },
          init: {
            value: foo,
            raw: "foo",
            type: StringLiteral,
            start: {
              line: 6,
              character: 6
            },
            end: {
              line: 6,
              character: 11
            }
          },
          type: AssignmentStatement,
          start: {
            line: 6,
            character: 2
          },
          end: {
            line: 6,
            character: 12
          }
        },
        {
          arg: {
            body: [
              {
                expression: {
                  origin: {
                    name: print,
                    type: Identifier,
                    start: {
                      line: 9,
                      character: 3
                    },
                    end: {
                      line: 9,
                      character: 8
                    }
                  },
                  arguments: [
                    {
                      op: +,
                      left: {
                        name: a,
                        type: Identifier,
                        start: {
                          line: 9,
                          character: 9
                        },
                        end: {
                          line: 9,
                          character: 10
                        }
                      },
                      right: {
                        name: b,
                        type: Identifier,
                        start: {
                          line: 9,
                          character: 13
                        },
                        end: {
                          line: 9,
                          character: 14
                        }
                      },
                      type: BinaryExpression,
                      start: {
                        line: 9,
                        character: 11
                      },
                      end: {
                        line: 9,
                        character: 15
                      }
                    }
                  ],
                  type: CallExpression,
                  start: {
                    line: 9,
                    character: 8
                  },
                  end: {
                    line: 9,
                    character: 16
                  }
                },
                type: CallStatement,
                start: {
                  line: 9,
                  character: 3
                },
                end: {
                  line: 9,
                  character: 16
                }
              }
            ],
            name: anonymous,
            type: FunctionDeclaration,
            start: {
              line: 8,
              character: 9
            },
            end: {
              line: 10,
              character: 14
            }
          },
          type: ReturnStatement,
          start: {
            line: 8,
            character: 2
          },
          end: {
            line: 11,
            character: 13
          }
        }
      ],
      name: test,
      type: FunctionDeclaration,
      start: {
        line: 4,
        character: 1
      },
      end: {
        line: 11,
        character: 13
      }
    },
    {
      expression: {
        origin: {
          origin: {
            name: test,
            type: Identifier,
            start: {
              line: 13,
              character: 1
            },
            end: {
              line: 13,
              character: 5
            }
          },
          type: CallExpression,
          start: {
            line: 13,
            character: 5
          },
          end: {
            line: 13,
            character: 8
          }
        },
        type: CallExpression,
        start: {
          line: 13,
          character: 7
        },
        end: {
          line: 13,
          character: 10
        }
      },
      type: CallStatement,
      start: {
        line: 13,
        character: 1
      },
      end: {
        line: 13,
        character: 10
      }
    },
    {
      expression: {
        origin: {
          name: print,
          type: Identifier,
          start: {
            line: 14,
            character: 1
          },
          end: {
            line: 14,
            character: 6
          }
        },
        arguments: [
          {
            op: +,
            left: {
              name: a,
              type: Identifier,
              start: {
                line: 14,
                character: 7
              },
              end: {
                line: 14,
                character: 8
              }
            },
            right: {
              name: b,
              type: Identifier,
              start: {
                line: 14,
                character: 11
              },
              end: {
                line: 14,
                character: 12
              }
            },
            type: BinaryExpression,
            start: {
              line: 14,
              character: 9
            },
            end: {
              line: 14,
              character: 13
            }
          }
        ],
        type: CallExpression,
        start: {
          line: 14,
          character: 6
        },
        end: {
          line: 14,
          character: 14
        }
      },
      type: CallStatement,
      start: {
        line: 14,
        character: 1
      },
      end: {
        line: 14,
        character: 14
      }
    },
    {
      body: [
        {
          variable: {
            name: a,
            type: Identifier,
            start: {
              line: 17,
              character: 2
            },
            end: {
              line: 17,
              character: 3
            }
          },
          init: {
            value: was,
            raw: "was",
            type: StringLiteral,
            start: {
              line: 17,
              character: 6
            },
            end: {
              line: 17,
              character: 11
            }
          },
          type: AssignmentStatement,
          start: {
            line: 17,
            character: 2
          },
          end: {
            line: 17,
            character: 12
          }
        },
        {
          variable: {
            name: b,
            type: Identifier,
            start: {
              line: 18,
              character: 2
            },
            end: {
              line: 18,
              character: 3
            }
          },
          init: {
            value: foo,
            raw: "foo",
            type: StringLiteral,
            start: {
              line: 18,
              character: 6
            },
            end: {
              line: 18,
              character: 11
            }
          },
          type: AssignmentStatement,
          start: {
            line: 18,
            character: 2
          },
          end: {
            line: 18,
            character: 12
          }
        },
        {
          arg: {
            body: [
              {
                variable: {
                  name: a,
                  type: Identifier,
                  start: {
                    line: 21,
                    character: 3
                  },
                  end: {
                    line: 21,
                    character: 4
                  }
                },
                init: {
                  value: level - 2 : was,
                  raw: "level - 2 : was",
                  type: StringLiteral,
                  start: {
                    line: 21,
                    character: 7
                  },
                  end: {
                    line: 21,
                    character: 24
                  }
                },
                type: AssignmentStatement,
                start: {
                  line: 21,
                  character: 3
                },
                end: {
                  line: 21,
                  character: 25
                }
              },
              {
                variable: {
                  name: b,
                  type: Identifier,
                  start: {
                    line: 22,
                    character: 3
                  },
                  end: {
                    line: 22,
                    character: 4
                  }
                },
                init: {
                  value: level - 2 : foo,
                  raw: "level - 2 : foo",
                  type: StringLiteral,
                  start: {
                    line: 22,
                    character: 7
                  },
                  end: {
                    line: 22,
                    character: 24
                  }
                },
                type: AssignmentStatement,
                start: {
                  line: 22,
                  character: 3
                },
                end: {
                  line: 22,
                  character: 25
                }
              },
              {
                arg: {
                  body: [
                    {
                      expression: {
                        origin: {
                          name: print,
                          type: Identifier,
                          start: {
                            line: 25,
                            character: 4
                          },
                          end: {
                            line: 25,
                            character: 9
                          }
                        },
                        arguments: [
                          {
                            op: +,
                            left: {
                              name: a,
                              type: Identifier,
                              start: {
                                line: 25,
                                character: 10
                              },
                              end: {
                                line: 25,
                                character: 11
                              }
                            },
                            right: {
                              name: b,
                              type: Identifier,
                              start: {
                                line: 25,
                                character: 14
                              },
                              end: {
                                line: 25,
                                character: 15
                              }
                            },
                            type: BinaryExpression,
                            start: {
                              line: 25,
                              character: 12
                            },
                            end: {
                              line: 25,
                              character: 16
                            }
                          }
                        ],
                        type: CallExpression,
                        start: {
                          line: 25,
                          character: 9
                        },
                        end: {
                          line: 25,
                          character: 17
                        }
                      },
                      type: CallStatement,
                      start: {
                        line: 25,
                        character: 4
                      },
                      end: {
                        line: 25,
                        character: 17
                      }
                    }
                  ],
                  name: anonymous,
                  type: FunctionDeclaration,
                  start: {
                    line: 24,
                    character: 10
                  },
                  end: {
                    line: 26,
                    character: 15
                  }
                },
                type: ReturnStatement,
                start: {
                  line: 24,
                  character: 3
                },
                end: {
                  line: 27,
                  character: 14
                }
              }
            ],
            name: anonymous,
            type: FunctionDeclaration,
            start: {
              line: 20,
              character: 9
            },
            end: {
              line: 27,
              character: 14
            }
          },
          type: ReturnStatement,
          start: {
            line: 20,
            character: 2
          },
          end: {
            line: 28,
            character: 13
          }
        }
      ],
      name: inception,
      type: FunctionDeclaration,
      start: {
        line: 16,
        character: 1
      },
      end: {
        line: 28,
        character: 13
      }
    },
    {
      expression: {
        origin: {
          origin: {
            origin: {
              name: inception,
              type: Identifier,
              start: {
                line: 30,
                character: 1
              },
              end: {
                line: 30,
                character: 10
              }
            },
            type: CallExpression,
            start: {
              line: 30,
              character: 10
            },
            end: {
              line: 30,
              character: 13
            }
          },
          type: CallExpression,
          start: {
            line: 30,
            character: 12
          },
          end: {
            line: 30,
            character: 15
          }
        },
        type: CallExpression,
        start: {
          line: 30,
          character: 14
        },
        end: {
          line: 30,
          character: 16
        }
      },
      type: CallStatement,
      start: {
        line: 30,
        character: 1
      },
      end: {
        line: 30,
        character: 16
      }
    }
  ],
  namespaces: [
    a,
    b,
    test,
    print,
    inception
  ],
  literals: [
    {
      value: moo,
      raw: "moo",
      type: StringLiteral,
      start: {
        line: 1,
        character: 5
      },
      end: {
        line: 1,
        character: 10
      }
    },
    {
      value: 123.0,
      raw: 123,
      type: NumericLiteral,
      start: {
        line: 2,
        character: 5
      },
      end: {
        line: 2,
        character: 8
      }
    },
    {
      value: was,
      raw: "was",
      type: StringLiteral,
      start: {
        line: 5,
        character: 6
      },
      end: {
        line: 5,
        character: 11
      }
    },
    {
      value: foo,
      raw: "foo",
      type: StringLiteral,
      start: {
        line: 6,
        character: 6
      },
      end: {
        line: 6,
        character: 11
      }
    },
    {
      value: was,
      raw: "was",
      type: StringLiteral,
      start: {
        line: 17,
        character: 6
      },
      end: {
        line: 17,
        character: 11
      }
    },
    {
      value: foo,
      raw: "foo",
      type: StringLiteral,
      start: {
        line: 18,
        character: 6
      },
      end: {
        line: 18,
        character: 11
      }
    },
    {
      value: level - 2 : was,
      raw: "level - 2 : was",
      type: StringLiteral,
      start: {
        line: 21,
        character: 7
      },
      end: {
        line: 21,
        character: 24
      }
    },
    {
      value: level - 2 : foo,
      raw: "level - 2 : foo",
      type: StringLiteral,
      start: {
        line: 22,
        character: 7
      },
      end: {
        line: 22,
        character: 24
      }
    }
  ],
  type: Chunk,
  start: {
    line: 1,
    character: 1
  },
  end: {
    line: 30,
    character: 16
  }
}